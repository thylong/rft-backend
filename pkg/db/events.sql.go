// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: events.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const deleteEvent = `-- name: DeleteEvent :exec
DELETE FROM events WHERE event_id = $1
`

// Delete an event by ID
func (q *Queries) DeleteEvent(ctx context.Context, eventID pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteEvent, eventID)
	return err
}

const getEventByID = `-- name: GetEventByID :one
SELECT event_id, event_privacy, name, description, type, department, regions, tags, start_at FROM events WHERE event_id = $1
`

// Get a single event by ID
func (q *Queries) GetEventByID(ctx context.Context, eventID pgtype.UUID) (Event, error) {
	row := q.db.QueryRow(ctx, getEventByID, eventID)
	var i Event
	err := row.Scan(
		&i.EventID,
		&i.EventPrivacy,
		&i.Name,
		&i.Description,
		&i.Type,
		&i.Department,
		&i.Regions,
		&i.Tags,
		&i.StartAt,
	)
	return i, err
}

const getEvents = `-- name: GetEvents :many

SELECT event_id, event_privacy, name, description, type, department, regions, tags, start_at FROM events
WHERE (LOWER(name) LIKE LOWER('%' || $1 || '%') OR $1 = '')
LIMIT $2 OFFSET $3
`

type GetEventsParams struct {
	Column1 pgtype.Text `json:"column_1"`
	Limit   int32       `json:"limit"`
	Offset  int32       `json:"offset"`
}

// events.sql
// Get events with pagination and optional search
func (q *Queries) GetEvents(ctx context.Context, arg GetEventsParams) ([]Event, error) {
	rows, err := q.db.Query(ctx, getEvents, arg.Column1, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Event
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.EventID,
			&i.EventPrivacy,
			&i.Name,
			&i.Description,
			&i.Type,
			&i.Department,
			&i.Regions,
			&i.Tags,
			&i.StartAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEventsCount = `-- name: GetEventsCount :one
SELECT COUNT(*) FROM events
WHERE (LOWER(name) LIKE LOWER('%' || $1 || '%') OR $1 = '')
`

// Get total count for pagination
func (q *Queries) GetEventsCount(ctx context.Context, dollar_1 pgtype.Text) (int64, error) {
	row := q.db.QueryRow(ctx, getEventsCount, dollar_1)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const insertEvent = `-- name: InsertEvent :one
INSERT INTO events (
    event_privacy, name, description, type, department, regions, tags, start_at
) VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING event_id, event_privacy, name, description, type, department, regions, tags, start_at
`

type InsertEventParams struct {
	EventPrivacy int32            `json:"event_privacy"`
	Name         string           `json:"name"`
	Description  string           `json:"description"`
	Type         string           `json:"type"`
	Department   string           `json:"department"`
	Regions      []string         `json:"regions"`
	Tags         []string         `json:"tags"`
	StartAt      pgtype.Timestamp `json:"start_at"`
}

// Insert a new event
func (q *Queries) InsertEvent(ctx context.Context, arg InsertEventParams) (Event, error) {
	row := q.db.QueryRow(ctx, insertEvent,
		arg.EventPrivacy,
		arg.Name,
		arg.Description,
		arg.Type,
		arg.Department,
		arg.Regions,
		arg.Tags,
		arg.StartAt,
	)
	var i Event
	err := row.Scan(
		&i.EventID,
		&i.EventPrivacy,
		&i.Name,
		&i.Description,
		&i.Type,
		&i.Department,
		&i.Regions,
		&i.Tags,
		&i.StartAt,
	)
	return i, err
}
