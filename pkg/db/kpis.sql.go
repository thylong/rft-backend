// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: kpis.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const deleteKpi = `-- name: DeleteKpi :exec
DELETE FROM kpis WHERE id = $1
`

// Delete a kpi by ID
func (q *Queries) DeleteKpi(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteKpi, id)
	return err
}

const getKpiByID = `-- name: GetKpiByID :one
SELECT id, name, value, target, day, created_at, updated_at FROM kpis WHERE id = $1
`

// Get a single kpi by ID
func (q *Queries) GetKpiByID(ctx context.Context, id pgtype.UUID) (Kpi, error) {
	row := q.db.QueryRow(ctx, getKpiByID, id)
	var i Kpi
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Value,
		&i.Target,
		&i.Day,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getKpis = `-- name: GetKpis :many

SELECT id, name, value, target, day, created_at, updated_at FROM kpis
WHERE (LOWER(name) LIKE LOWER('%' || $1 || '%') OR $1 = '')
LIMIT $2 OFFSET $3
`

type GetKpisParams struct {
	Column1 pgtype.Text `json:"column_1"`
	Limit   int32       `json:"limit"`
	Offset  int32       `json:"offset"`
}

// kpis.sql
// Get kpis
func (q *Queries) GetKpis(ctx context.Context, arg GetKpisParams) ([]Kpi, error) {
	rows, err := q.db.Query(ctx, getKpis, arg.Column1, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Kpi
	for rows.Next() {
		var i Kpi
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Value,
			&i.Target,
			&i.Day,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getKpisCount = `-- name: GetKpisCount :one
SELECT COUNT(*) FROM kpis
WHERE (LOWER(name) LIKE LOWER('%' || $1 || '%') OR $1 = '')
`

// Get total count for pagination
func (q *Queries) GetKpisCount(ctx context.Context, dollar_1 pgtype.Text) (int64, error) {
	row := q.db.QueryRow(ctx, getKpisCount, dollar_1)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const insertKpi = `-- name: InsertKpi :one
INSERT INTO kpis (
    name, value, target, day
) VALUES ($1, $2, $3, $4)
RETURNING id, name, value, target, day, created_at, updated_at
`

type InsertKpiParams struct {
	Name   string      `json:"name"`
	Value  float64     `json:"value"`
	Target float64     `json:"target"`
	Day    pgtype.Date `json:"day"`
}

// Insert a new kpi
func (q *Queries) InsertKpi(ctx context.Context, arg InsertKpiParams) (Kpi, error) {
	row := q.db.QueryRow(ctx, insertKpi,
		arg.Name,
		arg.Value,
		arg.Target,
		arg.Day,
	)
	var i Kpi
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Value,
		&i.Target,
		&i.Day,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
