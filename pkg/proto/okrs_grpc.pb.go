// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: okrs.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	OkrService_GetOkrs_FullMethodName   = "/okrs.OkrService/GetOkrs"
	OkrService_GetOkr_FullMethodName    = "/okrs.OkrService/GetOkr"
	OkrService_PutOkr_FullMethodName    = "/okrs.OkrService/PutOkr"
	OkrService_PutKr_FullMethodName     = "/okrs.OkrService/PutKr"
	OkrService_DeleteOkr_FullMethodName = "/okrs.OkrService/DeleteOkr"
)

// OkrServiceClient is the client API for OkrService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OkrServiceClient interface {
	GetOkrs(ctx context.Context, in *GetOkrsRequest, opts ...grpc.CallOption) (*GetOkrsResponse, error)
	GetOkr(ctx context.Context, in *GetOkrRequest, opts ...grpc.CallOption) (*GetOkrResponse, error)
	PutOkr(ctx context.Context, in *PutOkrRequest, opts ...grpc.CallOption) (*PutOkrResponse, error)
	PutKr(ctx context.Context, in *PutKrRequest, opts ...grpc.CallOption) (*PutKrResponse, error)
	DeleteOkr(ctx context.Context, in *DeleteOkrRequest, opts ...grpc.CallOption) (*DeleteOkrResponse, error)
}

type okrServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOkrServiceClient(cc grpc.ClientConnInterface) OkrServiceClient {
	return &okrServiceClient{cc}
}

func (c *okrServiceClient) GetOkrs(ctx context.Context, in *GetOkrsRequest, opts ...grpc.CallOption) (*GetOkrsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOkrsResponse)
	err := c.cc.Invoke(ctx, OkrService_GetOkrs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *okrServiceClient) GetOkr(ctx context.Context, in *GetOkrRequest, opts ...grpc.CallOption) (*GetOkrResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOkrResponse)
	err := c.cc.Invoke(ctx, OkrService_GetOkr_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *okrServiceClient) PutOkr(ctx context.Context, in *PutOkrRequest, opts ...grpc.CallOption) (*PutOkrResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PutOkrResponse)
	err := c.cc.Invoke(ctx, OkrService_PutOkr_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *okrServiceClient) PutKr(ctx context.Context, in *PutKrRequest, opts ...grpc.CallOption) (*PutKrResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PutKrResponse)
	err := c.cc.Invoke(ctx, OkrService_PutKr_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *okrServiceClient) DeleteOkr(ctx context.Context, in *DeleteOkrRequest, opts ...grpc.CallOption) (*DeleteOkrResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteOkrResponse)
	err := c.cc.Invoke(ctx, OkrService_DeleteOkr_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OkrServiceServer is the server API for OkrService service.
// All implementations must embed UnimplementedOkrServiceServer
// for forward compatibility.
type OkrServiceServer interface {
	GetOkrs(context.Context, *GetOkrsRequest) (*GetOkrsResponse, error)
	GetOkr(context.Context, *GetOkrRequest) (*GetOkrResponse, error)
	PutOkr(context.Context, *PutOkrRequest) (*PutOkrResponse, error)
	PutKr(context.Context, *PutKrRequest) (*PutKrResponse, error)
	DeleteOkr(context.Context, *DeleteOkrRequest) (*DeleteOkrResponse, error)
	mustEmbedUnimplementedOkrServiceServer()
}

// UnimplementedOkrServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOkrServiceServer struct{}

func (UnimplementedOkrServiceServer) GetOkrs(context.Context, *GetOkrsRequest) (*GetOkrsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOkrs not implemented")
}
func (UnimplementedOkrServiceServer) GetOkr(context.Context, *GetOkrRequest) (*GetOkrResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOkr not implemented")
}
func (UnimplementedOkrServiceServer) PutOkr(context.Context, *PutOkrRequest) (*PutOkrResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutOkr not implemented")
}
func (UnimplementedOkrServiceServer) PutKr(context.Context, *PutKrRequest) (*PutKrResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutKr not implemented")
}
func (UnimplementedOkrServiceServer) DeleteOkr(context.Context, *DeleteOkrRequest) (*DeleteOkrResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOkr not implemented")
}
func (UnimplementedOkrServiceServer) mustEmbedUnimplementedOkrServiceServer() {}
func (UnimplementedOkrServiceServer) testEmbeddedByValue()                    {}

// UnsafeOkrServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OkrServiceServer will
// result in compilation errors.
type UnsafeOkrServiceServer interface {
	mustEmbedUnimplementedOkrServiceServer()
}

func RegisterOkrServiceServer(s grpc.ServiceRegistrar, srv OkrServiceServer) {
	// If the following call pancis, it indicates UnimplementedOkrServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&OkrService_ServiceDesc, srv)
}

func _OkrService_GetOkrs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOkrsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OkrServiceServer).GetOkrs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OkrService_GetOkrs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OkrServiceServer).GetOkrs(ctx, req.(*GetOkrsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OkrService_GetOkr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOkrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OkrServiceServer).GetOkr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OkrService_GetOkr_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OkrServiceServer).GetOkr(ctx, req.(*GetOkrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OkrService_PutOkr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutOkrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OkrServiceServer).PutOkr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OkrService_PutOkr_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OkrServiceServer).PutOkr(ctx, req.(*PutOkrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OkrService_PutKr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutKrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OkrServiceServer).PutKr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OkrService_PutKr_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OkrServiceServer).PutKr(ctx, req.(*PutKrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OkrService_DeleteOkr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOkrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OkrServiceServer).DeleteOkr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OkrService_DeleteOkr_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OkrServiceServer).DeleteOkr(ctx, req.(*DeleteOkrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OkrService_ServiceDesc is the grpc.ServiceDesc for OkrService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OkrService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "okrs.OkrService",
	HandlerType: (*OkrServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOkrs",
			Handler:    _OkrService_GetOkrs_Handler,
		},
		{
			MethodName: "GetOkr",
			Handler:    _OkrService_GetOkr_Handler,
		},
		{
			MethodName: "PutOkr",
			Handler:    _OkrService_PutOkr_Handler,
		},
		{
			MethodName: "PutKr",
			Handler:    _OkrService_PutKr_Handler,
		},
		{
			MethodName: "DeleteOkr",
			Handler:    _OkrService_DeleteOkr_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "okrs.proto",
}
