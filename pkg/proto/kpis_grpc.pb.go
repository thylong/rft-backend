// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: kpis.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	KpiService_GetKpis_FullMethodName   = "/kpis.KpiService/GetKpis"
	KpiService_GetKpi_FullMethodName    = "/kpis.KpiService/GetKpi"
	KpiService_PutKpi_FullMethodName    = "/kpis.KpiService/PutKpi"
	KpiService_DeleteKpi_FullMethodName = "/kpis.KpiService/DeleteKpi"
)

// KpiServiceClient is the client API for KpiService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KpiServiceClient interface {
	GetKpis(ctx context.Context, in *GetKpisRequest, opts ...grpc.CallOption) (*GetKpisResponse, error)
	GetKpi(ctx context.Context, in *GetKpiRequest, opts ...grpc.CallOption) (*GetKpiResponse, error)
	PutKpi(ctx context.Context, in *PutKpiRequest, opts ...grpc.CallOption) (*PutKpiResponse, error)
	DeleteKpi(ctx context.Context, in *DeleteKpiRequest, opts ...grpc.CallOption) (*DeleteKpiResponse, error)
}

type kpiServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewKpiServiceClient(cc grpc.ClientConnInterface) KpiServiceClient {
	return &kpiServiceClient{cc}
}

func (c *kpiServiceClient) GetKpis(ctx context.Context, in *GetKpisRequest, opts ...grpc.CallOption) (*GetKpisResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetKpisResponse)
	err := c.cc.Invoke(ctx, KpiService_GetKpis_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kpiServiceClient) GetKpi(ctx context.Context, in *GetKpiRequest, opts ...grpc.CallOption) (*GetKpiResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetKpiResponse)
	err := c.cc.Invoke(ctx, KpiService_GetKpi_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kpiServiceClient) PutKpi(ctx context.Context, in *PutKpiRequest, opts ...grpc.CallOption) (*PutKpiResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PutKpiResponse)
	err := c.cc.Invoke(ctx, KpiService_PutKpi_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kpiServiceClient) DeleteKpi(ctx context.Context, in *DeleteKpiRequest, opts ...grpc.CallOption) (*DeleteKpiResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteKpiResponse)
	err := c.cc.Invoke(ctx, KpiService_DeleteKpi_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KpiServiceServer is the server API for KpiService service.
// All implementations must embed UnimplementedKpiServiceServer
// for forward compatibility.
type KpiServiceServer interface {
	GetKpis(context.Context, *GetKpisRequest) (*GetKpisResponse, error)
	GetKpi(context.Context, *GetKpiRequest) (*GetKpiResponse, error)
	PutKpi(context.Context, *PutKpiRequest) (*PutKpiResponse, error)
	DeleteKpi(context.Context, *DeleteKpiRequest) (*DeleteKpiResponse, error)
	mustEmbedUnimplementedKpiServiceServer()
}

// UnimplementedKpiServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedKpiServiceServer struct{}

func (UnimplementedKpiServiceServer) GetKpis(context.Context, *GetKpisRequest) (*GetKpisResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKpis not implemented")
}
func (UnimplementedKpiServiceServer) GetKpi(context.Context, *GetKpiRequest) (*GetKpiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKpi not implemented")
}
func (UnimplementedKpiServiceServer) PutKpi(context.Context, *PutKpiRequest) (*PutKpiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutKpi not implemented")
}
func (UnimplementedKpiServiceServer) DeleteKpi(context.Context, *DeleteKpiRequest) (*DeleteKpiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteKpi not implemented")
}
func (UnimplementedKpiServiceServer) mustEmbedUnimplementedKpiServiceServer() {}
func (UnimplementedKpiServiceServer) testEmbeddedByValue()                    {}

// UnsafeKpiServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KpiServiceServer will
// result in compilation errors.
type UnsafeKpiServiceServer interface {
	mustEmbedUnimplementedKpiServiceServer()
}

func RegisterKpiServiceServer(s grpc.ServiceRegistrar, srv KpiServiceServer) {
	// If the following call pancis, it indicates UnimplementedKpiServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&KpiService_ServiceDesc, srv)
}

func _KpiService_GetKpis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKpisRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KpiServiceServer).GetKpis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KpiService_GetKpis_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KpiServiceServer).GetKpis(ctx, req.(*GetKpisRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KpiService_GetKpi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKpiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KpiServiceServer).GetKpi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KpiService_GetKpi_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KpiServiceServer).GetKpi(ctx, req.(*GetKpiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KpiService_PutKpi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutKpiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KpiServiceServer).PutKpi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KpiService_PutKpi_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KpiServiceServer).PutKpi(ctx, req.(*PutKpiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KpiService_DeleteKpi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteKpiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KpiServiceServer).DeleteKpi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KpiService_DeleteKpi_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KpiServiceServer).DeleteKpi(ctx, req.(*DeleteKpiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// KpiService_ServiceDesc is the grpc.ServiceDesc for KpiService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KpiService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kpis.KpiService",
	HandlerType: (*KpiServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetKpis",
			Handler:    _KpiService_GetKpis_Handler,
		},
		{
			MethodName: "GetKpi",
			Handler:    _KpiService_GetKpi_Handler,
		},
		{
			MethodName: "PutKpi",
			Handler:    _KpiService_PutKpi_Handler,
		},
		{
			MethodName: "DeleteKpi",
			Handler:    _KpiService_DeleteKpi_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kpis.proto",
}
